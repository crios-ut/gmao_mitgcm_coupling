GEOS-5 Documentation for Heracles 5.4
http://geos5.org/wiki/index.php?title=GEOS-5_Documentation_for_Heracles_5.4

MITgcm documentation
http://mitgcm.org
http://mitgcm.org/public/r2_manual/latest/

================================================================
10/09/2017: Adding print statements without recompiling complete code

For example, after adding:
      print *,'DEBUG: PE ', myrank, ' after ASYNCIO_INIT ', globalRank
to: src/GMAO_Shared/MAPL_Base/MAPL_Cap.F90
 setenv ESMADIR $WorkingDir/GEOSodas
 cd $WorkingDir/GEOSodas/src/GMAO_Shared/MAPL_Base
 make install
 cd $WorkingDir/GEOSodas/src/Applications/GEOSgcm_App
 make install

================================================================
12/19/2016: GEOS-5 documentation and restarts

In order to run multiple segments you have to do some things between
segments. These things are in the gcm_run.j script.  On discover at least
makes a "scratch" directory anew for each segment. this means that when a
segment is done you need to copy the "restart" files back to the place you
will copy them from (so that when you copy them from there you have the most
current ones). this includes the little file called cap_restart. if you are
doing this with the restarts and not for cap_restart then you are moving the
atmospheric state forward but not the boundary conditions or the sun (people
run ensembles that way....).

now - as for the details of the model and the equations. for the atmosphere
you can look at the GMD paper from last year (Molod et al) and it will
describe the physics in part, refer to a tech memo (rienecker et al 2008) for
more details and have references for the dynamics.

================================================================
11/27/2016: Compilation on Engaging
The first attempt was with:
  module purge
  module add mvapich2/gcc
  setenv MVAMPIC2 /cm/shared/apps/mvapich2/gcc/64/2.0b
  setenv MPI_INC_DIR /cm/shared/apps/mvapich2/gcc/64/2.0b/include
I was able to build Baselibs but failed to compile code_split_driver
because of missing coarray support in gcc version 4.4.7.
We probably need gcc >= 4.7 (https://gcc.gnu.org/wiki/Coarray).

================================================================
11/19/2016: SFLX
'SFLX',  'salt_flux_from_skin_to_ocean',          'N m-2',

I am guessing that when there is evaporation:
(i) "salty water" flows into the skin layer from the ocean,
(ii) freshwater flows from skin layer to atmosphere, and
(iii) salt flows from skin layer to ocean.

If SFLX is this third component of evaporation, it can be ignored for driving
MITgcm since MITgcm only exports freshwater from ocean during evaporation.
But SFLUX has both positive and negative numbers, so above decomposition may not be correct.

Another detail that we will need to worry about later on is that in the presence of sea-ice
the MITgcm exports “salty water” to the ice and then rejects some of that salt back to
the ocean.  Also, the unit of SFLX specified in MIT_GEOS5PlugMod.F90 seem wrong.
They probably should be g/m^2/s instead of N/m^2.

================================================================
11/18/2016: HEARTBEAT_DT from CAP.rc
For time being set MITgcm deltaT to be identical to HEARTBEAT_DT

================================================================
11/17/2016: Coupling details

so i verified the info related to the "HFLX" field. it is what i thought, which is,
the turb heat flux (sens+lat) into the ocean from the bottom of the skin layer.
it does not have the net radiation in there. it basically sort of redoes the bulk
formula, using the skin temp and the top of the ocean temp to compute
the fluxes. this may not be all that far from sensible+latent at the surface,
but it is not that.

one other note: the enthalpy in mom is apparantly not impacted by the
precip, its done in some other way that i don't know now.
(jean michel, i have images of the "temperature of the rain" discussions
with john and alistair..... cracks me up to remember....)

we need to talk (tomorrow i guess) about the science here.

QFLX has the same issue as HFLX - it is not e-p over the open ocean
(runoff and ice melt where needed). it is the flux from the skin layer
into the ocean. runoff is not here (connection is elsewhere) and ice
melt is "taken" by the skin layer.

andrea


On 11/17/2016 11:34 AM, Menemenlis, Dimitris (329C) wrote:
Hi Andrea, are you available to discuss the coupled code sometime today?

We have a first-draft two-way coupled system up and running!
But now we need to fine-tune the fields that are passed back-and-forth and
make sure that the units, parameters, signs, location on grid, and orientation are all correct.

Here is a summary of what I think we have right now:
(I can share screen when we talk and show you these fields in plots and animations.)

=============
Time step:

MITgcm at cs32 configuration is running with 1 hour time steps.
But we can change that as needed.

(Note that as previously configured, the MITgcm DeltatT was
 set to 20 minute while GEOS-5 MIT_DT was set to 15 minutes.
 This caused the MITgcm to run for 96 hours while GEOS-5 ran for 24 hours.
 At least now both GEOS-5 and MITgcm run for 24 hours.
 But Atanas and I are not 100% sure this is set correctly.)

=============
Surface stress:

GEOS-5 passes:
'TAUX',  'Agrid_eastward_stress_on_skin',         'N m-2’
'TAUY',  'Agrid_northward_stress_on_skin',        'N m-2’

Please confirm that what GESO-5 sends to MITgcm is “geographical East and North”,
not “East and North relative to MITgcm cube-sphere grid orientation”.
Also please confirm that “eastward stress on skin” means that
ocean surface current current will be accelerated towards the East direction.

MITgcm expects:
C     fu    :: Surface wind stress in N/m^2
C              > 0 for increase in uVel (grid-orienation-aligned)
C              Typical range: -0.5 < fu < 0.5
C              Southwest C-grid U point
C
C     fv    :: Surface wind stress in N/m^2
C              > 0 for increase in vVel (grid-orienation-aligned)
C              Typical range: -0.5 < fv < 0.5
C              Southwest C-grid V point

I think what I need to do is interpolate to C-grid locations and rotate to
from geographic to MITgcm coordinates.

=============
Surface het flux:

GEOS-5 passes:
'HFLX',  'turbulent_heat_flux_from_skin_to_ocean','W m-2’
'SWHEAT','solar_heating_rate',                    'W m-2’,   (note this is a 3D field)

Please confirm whether or not HFLX includes sensible, latent, and radiation heating,
and whether positive HFLX and SWHEAT means ocean cooling.

MITgcm expects:
C     Qnet  :: Net upward surface heat flux (including shortwave) in W/m^2
C              Qnet = latent + sensible + net longwave + net shortwave
C              > 0 for decrease in theta (ocean cooling)
C              Typical range: -250 < Qnet < 600
C              Southwest C-grid tracer point
C     Qsw   :: Net upward shortwave radiation in W/m^2
C              Qsw = - ( downward - ice and snow absorption - reflected )
C              > 0 for decrease in theta (ocean cooling)
C              Typical range: -350 < Qsw < 0
C              Southwest C-grid tracer point

I think what needs to be done is (i) make sure MITgcm gets “net” surface heat flux
from GEOS-5 and (ii) collapse GEOS-5 SWHEAT to surface level and let MITgcm
redistribute the shortwave heating vertically.

=============
Surface freshwater flux:

GEOS-5 passes:
'QFLX',  'freshwater_flux_from_skin_to_ocean',    'kg m-2 s-1’

Please confirm that positive QFLX means ocean freshening.
And whether QFLX includes evaporation, precipitation, and runoff.

MITgcm expects:
C     EmPmR :: Net upward freshwater flux in kg/m2/s
C              EmPmR = Evaporation - precipitation - runoff
C              > 0 for increase in salt (ocean salinity)
C              Typical range: -1e-4 < EmPmR < 1e-4
C              Southwest C-grid tracer point

=============
Surface salt flux:

GEOS-5 passes:
'SFLX',  'salt_flux_from_skin_to_ocean',          'N m-2’

The units seem wrong.
Also, I only expected salt flux when sea ice is forming or melting
(or possibly from rivers).  Why is there non-zero salt flux above open ocean?

MITgcm expects:
C  saltFlux :: Net upward salt flux in psu.kg/m^2/s
C              flux of Salt taken out of the ocean per time unit (second).
C              Note: a) only used when salty sea-ice forms or melts.
C                    b) units: when salinity (unit= psu) is expressed
C                       in g/kg, saltFlux unit becomes g/m^2/s.
C              > 0 for decrease in SSS.
C              Southwest C-grid tracer point

=============
Atmospheric pressure:

GEOS-5 passes:
'PS',    'Surface Atmospheric Pressure',          ‘Pa'

MITgcm expects:
C     pLoad :: for the ocean:      atmospheric pressure at z=eta
C                Units are           Pa=N/m^2

I think we can ignore surface pressure for time being, as it has negligible dynamical consequence
on ocean circulation.  (But easy to include if needed.)

=============
Sea surface temperature and salinity

MITgcm passes:
!     TS - sea surface temperature in K
!     SS - sea surface salinty     in g/kg

I think we are all set here.

=============
Ocean surface velocity

MITgcm passes:
!     US - surface currents (cell-centered, along latitude circles)
!     VS - surface currents (cell-centered, along longitude lines)

Again, I think we are all set.  That is we rotate vectors to geographical coordinates
and interpolate to MITgcm grid cell centers before sending to GEOS-5.
But be good to double-check this is what GEOS-5 expects.

================================================================
11/16/2016: First 4 time steps of SWHEAT are zeros

I would not worry too much about the 1-hour "delay" in SWHEAT. This is
strictly an artifact of the current setup. Here is a full disclosure:

In GEOS-5 radiation process(es) (both SW and IR) are computationally
expensive, and we have made a decision to not do "full" calculation
every time step. Instead we keep an internal state, which is updated
once an hour, and every time step we make a correction to account for
the movement of the Sun. This procedure works fine and we like the
results. To have everything working as designed, we need a "full" set
of restarts. If we do not have all of the required restarts, we allow
the so-called bootstrapping (i.e. few of the restarts are required and
the rest are generated by the model in few time steps). At the end of
the run the model creates a full set of restarts, which are meant to
be used for the next run.

As you remember very very, Matt gave us a set of boundary conditions
and restarts for few grid resolutions ("tiny.tgz"). These contain only
the required restarts (and solar radiation restart is not one of
them). Therefore until the first full solar update (done at the bottom
of every hour), solar internal state contains zero (ONLY for a
bootstrapped run). After that, everything should be fine.

So, here are two possibilities for a test:
1) Once you made a successful run, save the restarts (*_checkpoint
files). Rename them *_rst, place them where the rest of the restarts
are (typically one level above scratch, where gcm_run.j is) and start
a new run. Technically for SWHEAT issue you would need only
solar_internal_rst, so you do not overwrite the original restarts.

2) Alternatively, if you comment out SOLAR_DR and IRRAD_DT lines in
AGCM.rc, radiation would do full calculations every time step, and you
do not need the solar_internal_rst. The run would be slower though

I recommend, that you test 1) and/or 2). If SWHEAT behaves as
expected, do not make any changes to setup, since this will NOT be an
issue for continuous run

================================================================
11/9/2016: First draft coupling

For the "first-draft" coupling, I would like to see all of the output
fields (US, VS, SS) to be set. Look at lines 564-568 in the
MIT_Plug. The actual code that sets them is in
mitgcm_setup/code_split_driver/driver_get_export_state.FOR. All of
these variables are 2d, and you can see around line 35 there is "if"
block to handle TS, but the rest is stubbed.

Similarly, for the import from GEOS-5, only TAUX and TAUY are handled
by driver_set_import_state.FOR. But the list is much larger: check
lines 546-554 in MIT_Plug (the LATS abd LONS are actually only for
debugging)
